package threadvfl;

import dev.kuku.vfl.core.buffer.DummyBuffer;
import dev.kuku.vfl.core.buffer.VFLBuffer;
import dev.kuku.vfl.core.buffer.flushHandler.NestedJsonFlushHandler;
import dev.kuku.vfl.core.buffer.flushHandler.VFLFlushHandler;
import dev.kuku.vfl.impl.threadlocal.ThreadVFLAnnotation;
import dev.kuku.vfl.impl.threadlocal.VFLAnnotationCompletableFuture;
import dev.kuku.vfl.impl.threadlocal.VFLBlock;
import org.junit.jupiter.api.Test;

public class AnnotationTest {
    static VFLBuffer b;

    static VFLBuffer createBuffer(String fileName) {
        VFLFlushHandler f = new NestedJsonFlushHandler("test/output/" + AnnotationTest.class.getSimpleName() + "/" + fileName + ".json");
        //return new AsyncVFLBuffer(100, 3000, 100, f, Executors.newVirtualThreadPerTaskExecutor(), Executors.newSingleThreadScheduledExecutor());
        return new DummyBuffer();
    }

    @Test
    void test() {
        ThreadVFLAnnotation.initialise(createBuffer("linear"), false);
        new TestService().linear();
    }

    @Test
    void asyncTest() {
        ThreadVFLAnnotation.initialise(createBuffer("async"), false);
        long before = System.currentTimeMillis();
        new TestService().asyncTest();
        long after = System.currentTimeMillis();
        var duration = after - before;
        System.out.println(duration);
    }
}

class TestService {
    @VFLBlock
    private int square(int a) {
        return a * a;
    }

    @VFLBlock
    private int squareAndMultiply(int a, int b) {
        int num = a * b;
        return square(num);
    }

    @VFLBlock
    public void linear() {
        int a = square(10);
        int b = squareAndMultiply(a, 2);
        square(b);
    }

    @VFLBlock
    public void asyncTest() {
        int a = square(10);
        var futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(2));
        int c = squareAndMultiply(a, 2);
        int b = futureB.join();
        a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join(); a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();  a = square(10);
        futureB = VFLAnnotationCompletableFuture.supplyAsync(() -> square(10));
        c = squareAndMultiply(2, 2);
        b = futureB.join();
    }
}
